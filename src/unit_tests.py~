import repeated_donor_analysis.py as ra
from sortedcontainers import SortedList
import unittest


class TestRepeatedDonorAnalysisMethods(unittest.TestCase):
    def test_is_valid(self):
        correct_entry = 'CMTE_ID|1|2|3|4|5|6|JEROME, CHRISTOPHER|8|9|30033|11|12|08232017|40||16|17|18|19|20'.split('|')
        other_id_error = 'CMTE_ID|1|2|3|4|5|6|JEROME, CHRISTOPHER|8|9|30033|11|12|08232017|40|otherid|16|17|18|19|20'.split('|')
        date_error = 'CMTE_ID|1|2|3|4|5|6|JEROME, CHRISTOPHER|8|9|30033|11|12|0823201|40||16|17|18|19|20'.split('|')
        zip_error = 'CMTE_ID|1|2|3|4|5|6|JEROME, CHRISTOPHER|8|9|30abcsd|11|12|08232017|40||16|17|18|19|20'.split('|')
        name_error = 'CMTE_ID|1|2|3|4|5|6|CHRISTOPHER|8|9|30033|11|12|08232017|40||16|17|18|19|20'.split('|')
        cmte_error = '|1|2|3|4|5|6|JEROME, CHRISTOPHER|8|9|30033|11|12|08232017|40||16|17|18|19|20'.split('|')
        amt_error = 'CMTE_ID|1|2|3|4|5|6|JEROME, CHRISTOPHER|8|9|30033|11|12|08232017|||16|17|18|19|20'.split('|')
        length_error = [1, 2, 3, 4]
        self.assertTrue(ra.is_valid(correct_entry))
        self.assertFalse(ra.is_valid(other_id_error))
        self.assertFalse(ra.is_valid(date_error))
        self.assertFalse(ra.is_valid(zip_error))
        self.assertFalse(ra.is_valid(name_error))
        self.assertFalse(ra.is_valid(cmte_error))
        self.assertFalse(ra.is_valid(amt_error))
        self.assertFalse(ra.is_valid(length_error))
        
    def test_add_recipient(self):
        ra.repeat_donors = {'Haase, Bastian30033': 2017}
        ra.recipients = {}
        entry1 = ['test_rec', 'Wurst, Hans', '30034', 2017, 100]
        entry2 = ['test_rec', 'Haase, Bastian', '30033', 2018, 100]
        entry3 = ['test_rec', 'Haase, Bastian', '30033', 2017, 180]
        key = ra.add_recipients(entry1)
        self.assertEqual(key, None)
        self.assertEqual(ra.recipients, {})
        key = ra.add_recipients(entry2)
        self.assertEqual(key, ('test_rec', '30033', 2018))
        self.assertEqual(ra.recipients, {('test_rec', '30033', 2018): SortedList([100])})
        key = ra.add_recipients(entry3)
        self.assertEqual(key, None)
        self.assertEqual(ra.recipients, {})

    def test_add_donor(self):
        ra.repeat_donors = {}
        entry1 = ['test_rec', 'Wurst, Hans', '30034', 2017, 100]
        entry2 = ['test_rec', 'Haase, Bastian', '30033', 2018, 100]
        entry3 = ['test_rec', 'Haase, Bastian', '30033', 2017, 180]
        ra.add_donor(entry1)
        self.assertEqual(ra.repeat_donor, {'Wurst, Hans30035': 2017})
        ra.add_donor(entry2)
        self.assertEqual(ra.repeat_donor, {'Wurst, Hans30035': 2017, 'Haase Bastian30033': 2018})
        ra.add_donor(entry3)
        self.assertEqual(ra.repeat_donor, {'Wurst, Hans30035': 2017, 'Haase Bastian30033': 2017})

    def test_extract(self):
        correct_entry = 'CMTE_ID|1|2|3|4|5|6|JEROME, CHRISTOPHER|8|9|30033|11|12|08232017|40||16|17|18|19|20'.split('|')
        entry = ra.format_entry(correct_entry)
        self.assertEqual(entry, ['CMTE_ID', 'JEROME, CHRISTOPHER', '30033', 2017, 40])

    def test_percentile_count(self):
        ra.recipients['test'] = SortedList([1, 2, 3, 4, 5, 6, 7, 9, 10])
        perc, count = ra.percentile_count(30, 'test')
        self.assertEqual(perc, 3)
        self.assertEqual(count, 10)
        perc, count = ra.percentile_count(0, 'test')
        self.assertEqual(perc, 1)
        perc, count = ra.percentile_count(3, 'error')
        self.assertEqual(count, -1)
        perc, count = ra.percentile_count(-10, 'test')
        self.assertEqual(count, -2)

    def test_format_entry(self):
        ra.recipients = {('test', '30033', 2017): SortedList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])}
        formatted = 'test|30033|2017|3|55|10'
        self.assertEqual(formatted, ra.format_entry(30, ('test', '30033', 2017)))
    
    def myhash(self, string):
        res = 0
        count = 1
        for i in string:
            res += ord(i) * count ** 2
            count += 1
        return res


suite = unittest.TestLoader().loadTestsFromTestCase(TestRepeatedDonorAnalysisMethods)
unittest.TextTestRunner(verbosity=2).run(suite)
